name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Uruchom skanowanie bezpieczeï¿½stwa codziennie o 2:00 UTC
    - cron: '0 2 * * *'

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep

    - name: Run Bandit Security Scanner
      continue-on-error: true
      run: |
        mkdir -p reports
        bandit -r . -f sarif -o reports/bandit-report.sarif --exclude tests/ || echo "Bandit scan completed"
        bandit -r . -f txt --exclude tests/ || echo "Bandit text scan completed"

    - name: Run Safety Check
      continue-on-error: true
      run: |
        mkdir -p reports
        safety check --json --output reports/safety-report.json || echo "Safety check completed"
        safety check --short-report || echo "Safety short report completed"

    - name: Run Semgrep Security Scan
      continue-on-error: true
      run: |
        mkdir -p reports
        semgrep --config=auto --sarif --output=reports/semgrep-report.sarif . || echo "Semgrep scan completed"
        semgrep --config=auto --severity=ERROR . || echo "Semgrep error scan completed"

    - name: Upload Bandit Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/bandit-report.sarif
        category: bandit
      continue-on-error: true

    - name: Upload Semgrep Results to GitHub Security  
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/semgrep-report.sarif
        category: semgrep
      continue-on-error: true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          reports/bandit-report.sarif
          reports/safety-report.json
          reports/semgrep-report.sarif

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@v3.82.7
      with:
        path: ./
        base: HEAD~10
        head: HEAD
        extra_args: --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker Image
      run: |
        mkdir -p reports
        # Tymczasowy Dockerfile do skanowania
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        COPY . .
        EXPOSE 8501
        CMD ["streamlit", "run", "app.py"]
        EOF
        docker build -t audio2tekst:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.26.0
      with:
        image-ref: 'audio2tekst:latest'
        format: 'sarif'
        output: 'reports/trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'reports/trivy-results.sarif'
        category: trivy

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-licenses
      run: |
        pip install pip-licenses

    - name: Check Licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --summary --format=text
      continue-on-error: true

    - name: Upload License Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-report
        path: licenses.json

# trigger workflow
